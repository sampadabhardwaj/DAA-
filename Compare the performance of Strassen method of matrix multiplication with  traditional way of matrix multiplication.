#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Function to perform traditional matrix multiplication
void traditionalMatrixMultiplication(int A[2][2], int B[2][2], int C[2][2]) {
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            C[i][j] = 0;
            for (int k = 0; k < 2; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

// Function for Strassen's matrix multiplication
void strassen(int A[2][2], int B[2][2], int C[2][2]) {
    int M1 = (A[0][0] + A[1][1]) * (B[0][0] + B[1][1]);
    int M2 = (A[1][0] + A[1][1]) * B[0][0];
    int M3 = A[0][0] * (B[0][1] - B[1][1]);
    int M4 = A[1][1] * (B[1][0] - B[0][0]);
    int M5 = (A[0][0] + A[0][1]) * B[1][1];
    int M6 = (A[1][0] - A[0][0]) * (B[0][0] + B[0][1]);
    int M7 = (A[0][1] - A[1][1]) * (B[1][0] + B[1][1]);

    C[0][0] = M1 + M4 - M5 + M7;
    C[0][1] = M3 + M5;
    C[1][0] = M2 + M4;
    C[1][1] = M1 + M3 - M2 + M6;
}

// Function to print matrix
void printMatrix(int matrix[2][2]) {
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int A[2][2] = {{1, 2}, {3, 4}};
    int B[2][2] = {{5, 6}, {7, 8}};
    int C1[2][2], C2[2][2];
    
    // Measure time for traditional matrix multiplication
    clock_t start = clock();
    traditionalMatrixMultiplication(A, B, C1);
    clock_t end = clock();
    double timeTraditional = (double)(end - start) / CLOCKS_PER_SEC;
    printf("Traditional Matrix Multiplication:\n");
    printMatrix(C1);
    printf("Time taken: %.6f seconds\n", timeTraditional);

    // Measure time for Strassen's matrix multiplication
    start = clock();
    strassen(A, B, C2);
    end = clock();
    double timeStrassen = (double)(end - start) / CLOCKS_PER_SEC;
    printf("Strassen's Matrix Multiplication:\n");
    printMatrix(C2);
    printf("Time taken: %.6f seconds\n", timeStrassen);

    return 0;
}
