#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Merge function for Merge Sort
void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    int L[n1], R[n2];
    for (int i = 0; i < n1; i++) L[i] = arr[left + i];
    for (int j = 0; j < n2; j++) R[j] = arr[mid + 1 + j];

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) arr[k++] = L[i++];
        else arr[k++] = R[j++];
    }

    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];
}

// Merge Sort Function
void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

// Partition function for Quick Sort
int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j < high; j++) {
        if (arr[j] < pivot) {
            i++;
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }

    int temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;
    return i + 1;
}

// Quick Sort Function
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

// Helper function to print the array
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int n = 10000;  // Size of the array
    int arr1[n], arr2[n];

    // Generate random numbers for the arrays
    srand(time(0));
    for (int i = 0; i < n; i++) {
        int num = rand() % 10000;
        arr1[i] = num;
        arr2[i] = num;
    }

    // Measure time for Merge Sort
    clock_t start = clock();
    mergeSort(arr1, 0, n - 1);
    clock_t end = clock();
    double timeMergeSort = (double)(end - start) / CLOCKS_PER_SEC;
    printf("Time taken by Merge Sort: %.6f seconds\n", timeMergeSort);

    // Measure time for Quick Sort
    start = clock();
    quickSort(arr2, 0, n - 1);
    end = clock();
    double timeQuickSort = (double)(end - start) / CLOCKS_PER_SEC;
    printf("Time taken by Quick Sort: %.6f seconds\n", timeQuickSort);

    return 0;
}
