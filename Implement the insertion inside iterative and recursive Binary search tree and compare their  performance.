#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Node structure for the BST
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Recursive insertion in BST
struct Node* insertRecursive(struct Node* root, int data) {
    if (root == NULL) {
        return createNode(data);
    }
    if (data < root->data) {
        root->left = insertRecursive(root->left, data);
    } else if (data > root->data) {
        root->right = insertRecursive(root->right, data);
    }
    return root;
}

// Iterative insertion in BST
struct Node* insertIterative(struct Node* root, int data) {
    struct Node* newNode = createNode(data);
    if (root == NULL) {
        return newNode;
    }

    struct Node* parent = NULL;
    struct Node* current = root;
    while (current != NULL) {
        parent = current;
        if (data < current->data) {
            current = current->left;
        } else {
            current = current->right;
        }
    }

    if (data < parent->data) {
        parent->left = newNode;
    } else {
        parent->right = newNode;
    }
    return root;
}

// Function to print the BST (in-order traversal)
void inOrder(struct Node* root) {
    if (root != NULL) {
        inOrder(root->left);
        printf("%d ", root->data);
        inOrder(root->right);
    }
}

int main() {
    struct Node* rootRecursive = NULL;
    struct Node* rootIterative = NULL;

    int n = 1000;  // Number of elements to insert
    int arr[n];
    srand(time(0));

    // Generate random data for insertion
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % 10000;
    }

    // Measure time for recursive insertion
    clock_t start = clock();
    for (int i = 0; i < n; i++) {
        rootRecursive = insertRecursive(rootRecursive, arr[i]);
    }
    clock_t end = clock();
    double timeRecursive = (double)(end - start) / CLOCKS_PER_SEC;
    printf("Time for recursive insertion: %.6f seconds\n", timeRecursive);

    // Measure time for iterative insertion
    start = clock();
    for (int i = 0; i < n; i++) {
        rootIterative = insertIterative(rootIterative, arr[i]);
    }
    end = clock();
    double timeIterative = (double)(end - start) / CLOCKS_PER_SEC;
    printf("Time for iterative insertion: %.6f seconds\n", timeIterative);

    // Print BST (optional for small input sizes)
    // printf("Recursive BST (in-order): ");
    // inOrder(rootRecursive);
    // printf("\nIterative BST (in-order): ");
    // inOrder(rootIterative);

    return 0;
}
