#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

// Naive String Matching Algorithm
int naiveSearch(char *text, char *pattern) {
    int n = strlen(text);
    int m = strlen(pattern);
    int count = 0;

    for (int i = 0; i <= n - m; i++) {
        int j = 0;
        while (j < m && text[i + j] == pattern[j])
            j++;
        if (j == m) count++;
    }
    return count;
}

// Rabin-Karp Algorithm
int rabinKarpSearch(char *text, char *pattern) {
    int n = strlen(text);
    int m = strlen(pattern);
    int d = 256; // Number of characters in input alphabet
    int q = 101; // A prime number
    int h = 1; // d^(m-1) % q
    int p = 0; // Hash value for pattern
    int t = 0; // Hash value for text
    int count = 0;

    // Precompute h = d^(m-1) % q
    for (int i = 0; i < m - 1; i++) {
        h = (h * d) % q;
    }

    // Compute the hash value of the pattern and the first window of text
    for (int i = 0; i < m; i++) {
        p = (p * d + pattern[i]) % q;
        t = (t * d + text[i]) % q;
    }

    // Slide the pattern over text one by one
    for (int i = 0; i <= n - m; i++) {
        if (p == t) {
            int j = 0;
            while (j < m && text[i + j] == pattern[j])
                j++;
            if (j == m) count++;
        }

        // Compute hash value for next window of text: Remove leading digit, add trailing digit
        if (i < n - m) {
            t = (d * (t - text[i] * h) + text[i + m]) % q;
            if (t < 0)
                t = (t + q);
        }
    }
    return count;
}

// KMP Algorithm (Knuth-Morris-Pratt)
void computeLPSArray(char *pattern, int m, int *lps) {
    int length = 0;
    lps[0] = 0;
    int i = 1;
    
    while (i < m) {
        if (pattern[i] == pattern[length]) {
            length++;
            lps[i] = length;
            i++;
        } else {
            if (length != 0) {
                length = lps[length - 1];
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }
}

int KMPSearch(char *text, char *pattern) {
    int n = strlen(text);
    int m = strlen(pattern);
    int *lps = (int *)malloc(m * sizeof(int));
    int count = 0;

    computeLPSArray(pattern, m, lps);

    int i = 0, j = 0;
    while (i < n) {
        if (pattern[j] == text[i]) {
            i++;
            j++;
        }

        if (j == m) {
            count++;
            j = lps[j - 1];
        } else if (i < n && pattern[j] != text[i]) {
            if (j != 0)
                j = lps[j - 1];
            else
                i++;
        }
    }

    free(lps);
    return count;
}

int main() {
    char text[] = "ABABDABACDABABCABAB";
    char pattern[] = "ABAB";

    // Measure time for Naive Algorithm
    clock_t start = clock();
    int naiveResult = naiveSearch(text, pattern);
    clock_t end = clock();
    printf("Naive Search: %d occurrences\n", naiveResult);
    printf("Time taken (Naive): %.6f seconds\n", (double)(end - start) / CLOCKS_PER_SEC);

    // Measure time for Rabin-Karp Algorithm
    start = clock();
    int rkResult = rabinKarpSearch(text, pattern);
    end = clock();
    printf("Rabin-Karp Search: %d occurrences\n", rkResult);
    printf("Time taken (Rabin-Karp): %.6f seconds\n", (double)(end - start) / CLOCKS_PER_SEC);

    // Measure time for KMP Algorithm
    start = clock();
    int kmpResult = KMPSearch(text, pattern);
    end = clock();
    printf("KMP Search: %d occurrences\n", kmpResult);
    printf("Time taken (KMP): %.6f seconds\n", (double)(end - start) / CLOCKS_PER_SEC);

    return 0;
}
