#include <stdio.h>
#include <stdbool.h>

// Function to check if a subset with sum 'target' exists
// using dynamic programming
bool isSubsetSum(int set[], int n, int target) {
    bool dp[n + 1][target + 1];

    // If target is 0, the answer is always true (empty subset)
    for (int i = 0; i <= n; i++) {
        dp[i][0] = true;
    }

    // If there are no elements, and the target is non-zero, answer is false
    for (int j = 1; j <= target; j++) {
        dp[0][j] = false;
    }

    // Fill the subset sum table in bottom-up manner
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= target; j++) {
            // If current element is greater than the target, we ignore it
            if (set[i - 1] <= j) {
                dp[i][j] = dp[i - 1][j] || dp[i - 1][j - set[i - 1]];
            } else {
                dp[i][j] = dp[i - 1][j];
            }
        }
    }

    // The bottom-right cell contains the result
    return dp[n][target];
}

int main() {
    int set[] = {3, 34, 4, 12, 5, 2};
    int target = 9;
    int n = sizeof(set) / sizeof(set[0]);

    if (isSubsetSum(set, n, target)) {
        printf("There is a subset with the given target sum %d\n", target);
    } else {
        printf("No subset with the given target sum %d\n", target);
    }

    return 0;
}
